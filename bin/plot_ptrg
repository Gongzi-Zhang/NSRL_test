#!/usr/bin/env python3
# coding: utf-8

'''
plot pedestal from a json file
'''

import os
import sys
import json
import matplotlib.pyplot as plt
from utilities import *
import zdc

config = zdc.config

def plot(pedFile, outputDir = '.'):
    if not os.path.exists(pedFile):
        logger.error(f"File {pedFile} doesn't exsit")
        return

    # load pedestal data
    with open(pedFile, 'r') as f:
        ped = json.load(f)

    # check output dir
    if not os.path.exists(outputDir):
        os.makedirs(outputDir)

    # plot
    # plt.figure(figsize=(10, 6))
    for gain in ['LG', 'HG']:
        values = ped[gain]
        channels = []
        mean = []
        rms = []
        for ch, [m, r] in values.items():
            sipmCh = config['caen2sipm'][int(ch)] 
            if sipmCh == -1:
                continue
            channels.append(sipmCh)
            mean.append(m)
            rms.append(r)

        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 6), sharex=True)
        ax1.scatter(channels, mean, marker='o', color='b' )
        # ax1.xlabel('SiPM Channel')
        ax1.set_ylabel('Mean [ADC]')
        ax1.set_title(f'{gain} Pedestal')
        ax1.grid()
        # plt.savefig(f'{outputDir}/{gain}_ped.png')


        ax2.scatter(channels, rms, marker='o', color='b' )
        ax2.set_xlabel('SiPM Channel')
        ax2.set_ylabel('RMS [ADC]')
        ax2.grid()

        fig.subplots_adjust(hspace=0)
        fig.savefig(f'{outputDir}/{gain}_ped.png')
        fig.clf()

def usage():
    print(sys.argv[0] + ' -i ped.json [-o output_dir]')
    print('\t-h: print this help message')
    print('\t-i: input ped json file')
    print('\t-o: ooutput dir for plots')

if __name__ == '__main__':
    # read in command line arguments
    i=1
    outDir = '.'
    pedFile = ''
    while i<len(sys.argv):
        if '-h' == sys.argv[i]:
            usage()
            exit(0)
        elif '-i' == sys.argv[i]:
            pedFile = sys.argv[i+1]
            i += 1
        elif '-o' == sys.argv[i]:
            outDir = sys.argv[i+1]
            i += 1
        else:
            logger.error(f'Unknown argument {sys.argv[i]}')
            exit(1)
        i += 1

    plot(pedFile, outDir)
