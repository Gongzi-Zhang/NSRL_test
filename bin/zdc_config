#!/usr/bin/env python3
'''
* Produce the zdc config file 
* Move the produced zdc_config.json to ${ZDCROOT}/database
'''

from utilities import * 
import json

# units
mm = 1
cm = 10

config = {}
config['unit'] = {'mm': mm, 'cm': cm}
config['nCAENs'] = 9
config['nChannelsPerCAEN'] = 64
config['nCAENChannels'] = config['nCAENs']*config['nChannelsPerCAEN']
# config['nCAENUsedChannels'] = [63, 62, 63, 62, 63, 62]
config['nLayers'] = 23
config['nChannelsPerLayer'] = 25;
config['nSiPMChannels'] = config['nLayers']*config['nChannelsPerLayer'] - 12
config['gridSize'] = 5
config['spacingXY'] = 48.8*mm
config['spacingZ'] = 27.112*mm
config['boardLabels'] = {
    0: 'E1',    1: 'O10', 2: 'E2',  3: 'O2',  4: 'E3',
    5: 'O3',    6: 'E13', 7: 'O11', 8: 'E5',  9: 'O5',
    10: 'E6',  11: 'O6', 12: 'E7', 13: 'O7', 14: 'E8',
    15: 'O8',  16: 'E9', 17: 'O9', 18: 'E10',19: 'O1',
    20: 'E11', 21: 'O4', 22: 'E4',
}
config['caen2sipm'] = {}
config['sipm2caen'] = {}
config['sipmPos'] = {}
config['sipmLayer'] = {}

class ChannelInfo:
    def __init__(self, ch: int, sipm_ch: int, layer: int, x: float, y: float, z: float):
        self.ch = ch
        self.sipm_ch = sipm_ch
        self.layer = layer
        self.x = x
        self.y = y
        self.z = z

def getChannelInfo(ch: int):
    if (ch < 0 or ch >= config['nCAENChannels']):
        logger.error(f'Invalid channel number: {ch} (allowed values: 0-{config["nCAENChannels"]})')
        return
    caen_unit = ch//config['nChannelsPerCAEN']  # count from 0
    caen_ch = ch%config['nChannelsPerCAEN']
    position_offset = 0
    layer = 5*(caen_unit//2)    # count from 0; every 2 CAEN units hold 5 layers
    if (caen_ch < 50):
        layer = layer + 2*(caen_unit%2) + caen_ch//config['nChannelsPerLayer']
    else:
        if (layer == 20):   # the last pair has only 1 CAEN unit
            layer += 2
        else:
            layer += 4
        if (caen_unit%2 == 0 and caen_ch > 62) or (caen_unit%2 == 1 and caen_ch > 61):
            # unused channels
            return ChannelInfo(ch, -1, -1, 0, 0, 0)
        if (caen_unit%2 == 1):
            position_offset = 13

    position = position_offset + caen_ch%config['nChannelsPerLayer']
    row = position // config['gridSize']
    col = position % config['gridSize']
    sipm_ch = layer*config['nChannelsPerLayer'] + position

    x = (2 - col)*config['spacingXY']
    y = (row - 2)*config['spacingXY']
    z = layer*config['spacingZ']

    if (layer%2 == 0):
        x += config['spacingXY']/4
        y += config['spacingXY']/4
    else:
        x -= config['spacingXY']/4
        y -= config['spacingXY']/4

    return ChannelInfo(ch, sipm_ch, layer, x, y, z)

for ch in range(0, config['nCAENChannels']):
    chInfo = getChannelInfo(ch)
    caenID = ch
    sipmID = chInfo.sipm_ch

    config['caen2sipm'][caenID] = sipmID

    if (-1 == sipmID):
        continue

    config['sipm2caen'][sipmID] = caenID
    config['sipmPos'][sipmID] =  [chInfo.x, chInfo.y, chInfo.z]
    config['sipmLayer'][sipmID] = chInfo.layer

with open('zdc_config.json', 'w') as f:
    json.dump(config, f, indent=2, separators=(',', ': '))
